// Qsys_mm_interconnect_0.v

// This file was auto-generated from altera_mm_interconnect_hw.tcl.  If you edit it your changes
// will probably be lost.
// 
// Generated using ACDS version 16.1 196

`timescale 1 ps / 1 ps
module Qsys_mm_interconnect_0 (
		input  wire        clk_50_clk_clk,                                               //                                             clk_50_clk.clk
		input  wire        data_mem_reset2_reset_bridge_in_reset_reset,                  //                  data_mem_reset2_reset_bridge_in_reset.reset
		input  wire        i2cslave_to_avlmm_bridge_0_reset_reset_bridge_in_reset_reset, // i2cslave_to_avlmm_bridge_0_reset_reset_bridge_in_reset.reset
		input  wire [31:0] i2cslave_to_avlmm_bridge_0_avalon_master_address,             //               i2cslave_to_avlmm_bridge_0_avalon_master.address
		output wire        i2cslave_to_avlmm_bridge_0_avalon_master_waitrequest,         //                                                       .waitrequest
		input  wire [3:0]  i2cslave_to_avlmm_bridge_0_avalon_master_byteenable,          //                                                       .byteenable
		input  wire        i2cslave_to_avlmm_bridge_0_avalon_master_read,                //                                                       .read
		output wire [31:0] i2cslave_to_avlmm_bridge_0_avalon_master_readdata,            //                                                       .readdata
		output wire        i2cslave_to_avlmm_bridge_0_avalon_master_readdatavalid,       //                                                       .readdatavalid
		input  wire        i2cslave_to_avlmm_bridge_0_avalon_master_write,               //                                                       .write
		input  wire [31:0] i2cslave_to_avlmm_bridge_0_avalon_master_writedata,           //                                                       .writedata
		output wire [7:0]  data_mem_s2_address,                                          //                                            data_mem_s2.address
		output wire        data_mem_s2_write,                                            //                                                       .write
		input  wire [31:0] data_mem_s2_readdata,                                         //                                                       .readdata
		output wire [31:0] data_mem_s2_writedata,                                        //                                                       .writedata
		output wire [3:0]  data_mem_s2_byteenable,                                       //                                                       .byteenable
		output wire        data_mem_s2_chipselect,                                       //                                                       .chipselect
		output wire        data_mem_s2_clken,                                            //                                                       .clken
		output wire [1:0]  led_s1_address,                                               //                                                 led_s1.address
		output wire        led_s1_write,                                                 //                                                       .write
		input  wire [31:0] led_s1_readdata,                                              //                                                       .readdata
		output wire [31:0] led_s1_writedata,                                             //                                                       .writedata
		output wire        led_s1_chipselect                                             //                                                       .chipselect
	);

	wire          i2cslave_to_avlmm_bridge_0_avalon_master_translator_avalon_universal_master_0_waitrequest;   // i2cslave_to_avlmm_bridge_0_avalon_master_agent:av_waitrequest -> i2cslave_to_avlmm_bridge_0_avalon_master_translator:uav_waitrequest
	wire   [31:0] i2cslave_to_avlmm_bridge_0_avalon_master_translator_avalon_universal_master_0_readdata;      // i2cslave_to_avlmm_bridge_0_avalon_master_agent:av_readdata -> i2cslave_to_avlmm_bridge_0_avalon_master_translator:uav_readdata
	wire          i2cslave_to_avlmm_bridge_0_avalon_master_translator_avalon_universal_master_0_debugaccess;   // i2cslave_to_avlmm_bridge_0_avalon_master_translator:uav_debugaccess -> i2cslave_to_avlmm_bridge_0_avalon_master_agent:av_debugaccess
	wire   [31:0] i2cslave_to_avlmm_bridge_0_avalon_master_translator_avalon_universal_master_0_address;       // i2cslave_to_avlmm_bridge_0_avalon_master_translator:uav_address -> i2cslave_to_avlmm_bridge_0_avalon_master_agent:av_address
	wire          i2cslave_to_avlmm_bridge_0_avalon_master_translator_avalon_universal_master_0_read;          // i2cslave_to_avlmm_bridge_0_avalon_master_translator:uav_read -> i2cslave_to_avlmm_bridge_0_avalon_master_agent:av_read
	wire    [3:0] i2cslave_to_avlmm_bridge_0_avalon_master_translator_avalon_universal_master_0_byteenable;    // i2cslave_to_avlmm_bridge_0_avalon_master_translator:uav_byteenable -> i2cslave_to_avlmm_bridge_0_avalon_master_agent:av_byteenable
	wire          i2cslave_to_avlmm_bridge_0_avalon_master_translator_avalon_universal_master_0_readdatavalid; // i2cslave_to_avlmm_bridge_0_avalon_master_agent:av_readdatavalid -> i2cslave_to_avlmm_bridge_0_avalon_master_translator:uav_readdatavalid
	wire          i2cslave_to_avlmm_bridge_0_avalon_master_translator_avalon_universal_master_0_lock;          // i2cslave_to_avlmm_bridge_0_avalon_master_translator:uav_lock -> i2cslave_to_avlmm_bridge_0_avalon_master_agent:av_lock
	wire          i2cslave_to_avlmm_bridge_0_avalon_master_translator_avalon_universal_master_0_write;         // i2cslave_to_avlmm_bridge_0_avalon_master_translator:uav_write -> i2cslave_to_avlmm_bridge_0_avalon_master_agent:av_write
	wire   [31:0] i2cslave_to_avlmm_bridge_0_avalon_master_translator_avalon_universal_master_0_writedata;     // i2cslave_to_avlmm_bridge_0_avalon_master_translator:uav_writedata -> i2cslave_to_avlmm_bridge_0_avalon_master_agent:av_writedata
	wire    [2:0] i2cslave_to_avlmm_bridge_0_avalon_master_translator_avalon_universal_master_0_burstcount;    // i2cslave_to_avlmm_bridge_0_avalon_master_translator:uav_burstcount -> i2cslave_to_avlmm_bridge_0_avalon_master_agent:av_burstcount
	wire   [31:0] led_s1_agent_m0_readdata;                                                                    // led_s1_translator:uav_readdata -> led_s1_agent:m0_readdata
	wire          led_s1_agent_m0_waitrequest;                                                                 // led_s1_translator:uav_waitrequest -> led_s1_agent:m0_waitrequest
	wire          led_s1_agent_m0_debugaccess;                                                                 // led_s1_agent:m0_debugaccess -> led_s1_translator:uav_debugaccess
	wire   [31:0] led_s1_agent_m0_address;                                                                     // led_s1_agent:m0_address -> led_s1_translator:uav_address
	wire    [3:0] led_s1_agent_m0_byteenable;                                                                  // led_s1_agent:m0_byteenable -> led_s1_translator:uav_byteenable
	wire          led_s1_agent_m0_read;                                                                        // led_s1_agent:m0_read -> led_s1_translator:uav_read
	wire          led_s1_agent_m0_readdatavalid;                                                               // led_s1_translator:uav_readdatavalid -> led_s1_agent:m0_readdatavalid
	wire          led_s1_agent_m0_lock;                                                                        // led_s1_agent:m0_lock -> led_s1_translator:uav_lock
	wire   [31:0] led_s1_agent_m0_writedata;                                                                   // led_s1_agent:m0_writedata -> led_s1_translator:uav_writedata
	wire          led_s1_agent_m0_write;                                                                       // led_s1_agent:m0_write -> led_s1_translator:uav_write
	wire    [2:0] led_s1_agent_m0_burstcount;                                                                  // led_s1_agent:m0_burstcount -> led_s1_translator:uav_burstcount
	wire          led_s1_agent_rf_source_valid;                                                                // led_s1_agent:rf_source_valid -> led_s1_agent_rsp_fifo:in_valid
	wire  [102:0] led_s1_agent_rf_source_data;                                                                 // led_s1_agent:rf_source_data -> led_s1_agent_rsp_fifo:in_data
	wire          led_s1_agent_rf_source_ready;                                                                // led_s1_agent_rsp_fifo:in_ready -> led_s1_agent:rf_source_ready
	wire          led_s1_agent_rf_source_startofpacket;                                                        // led_s1_agent:rf_source_startofpacket -> led_s1_agent_rsp_fifo:in_startofpacket
	wire          led_s1_agent_rf_source_endofpacket;                                                          // led_s1_agent:rf_source_endofpacket -> led_s1_agent_rsp_fifo:in_endofpacket
	wire          led_s1_agent_rsp_fifo_out_valid;                                                             // led_s1_agent_rsp_fifo:out_valid -> led_s1_agent:rf_sink_valid
	wire  [102:0] led_s1_agent_rsp_fifo_out_data;                                                              // led_s1_agent_rsp_fifo:out_data -> led_s1_agent:rf_sink_data
	wire          led_s1_agent_rsp_fifo_out_ready;                                                             // led_s1_agent:rf_sink_ready -> led_s1_agent_rsp_fifo:out_ready
	wire          led_s1_agent_rsp_fifo_out_startofpacket;                                                     // led_s1_agent_rsp_fifo:out_startofpacket -> led_s1_agent:rf_sink_startofpacket
	wire          led_s1_agent_rsp_fifo_out_endofpacket;                                                       // led_s1_agent_rsp_fifo:out_endofpacket -> led_s1_agent:rf_sink_endofpacket
	wire          cmd_mux_src_valid;                                                                           // cmd_mux:src_valid -> led_s1_agent:cp_valid
	wire  [101:0] cmd_mux_src_data;                                                                            // cmd_mux:src_data -> led_s1_agent:cp_data
	wire          cmd_mux_src_ready;                                                                           // led_s1_agent:cp_ready -> cmd_mux:src_ready
	wire    [1:0] cmd_mux_src_channel;                                                                         // cmd_mux:src_channel -> led_s1_agent:cp_channel
	wire          cmd_mux_src_startofpacket;                                                                   // cmd_mux:src_startofpacket -> led_s1_agent:cp_startofpacket
	wire          cmd_mux_src_endofpacket;                                                                     // cmd_mux:src_endofpacket -> led_s1_agent:cp_endofpacket
	wire   [31:0] data_mem_s2_agent_m0_readdata;                                                               // data_mem_s2_translator:uav_readdata -> data_mem_s2_agent:m0_readdata
	wire          data_mem_s2_agent_m0_waitrequest;                                                            // data_mem_s2_translator:uav_waitrequest -> data_mem_s2_agent:m0_waitrequest
	wire          data_mem_s2_agent_m0_debugaccess;                                                            // data_mem_s2_agent:m0_debugaccess -> data_mem_s2_translator:uav_debugaccess
	wire   [31:0] data_mem_s2_agent_m0_address;                                                                // data_mem_s2_agent:m0_address -> data_mem_s2_translator:uav_address
	wire    [3:0] data_mem_s2_agent_m0_byteenable;                                                             // data_mem_s2_agent:m0_byteenable -> data_mem_s2_translator:uav_byteenable
	wire          data_mem_s2_agent_m0_read;                                                                   // data_mem_s2_agent:m0_read -> data_mem_s2_translator:uav_read
	wire          data_mem_s2_agent_m0_readdatavalid;                                                          // data_mem_s2_translator:uav_readdatavalid -> data_mem_s2_agent:m0_readdatavalid
	wire          data_mem_s2_agent_m0_lock;                                                                   // data_mem_s2_agent:m0_lock -> data_mem_s2_translator:uav_lock
	wire   [31:0] data_mem_s2_agent_m0_writedata;                                                              // data_mem_s2_agent:m0_writedata -> data_mem_s2_translator:uav_writedata
	wire          data_mem_s2_agent_m0_write;                                                                  // data_mem_s2_agent:m0_write -> data_mem_s2_translator:uav_write
	wire    [2:0] data_mem_s2_agent_m0_burstcount;                                                             // data_mem_s2_agent:m0_burstcount -> data_mem_s2_translator:uav_burstcount
	wire          data_mem_s2_agent_rf_source_valid;                                                           // data_mem_s2_agent:rf_source_valid -> data_mem_s2_agent_rsp_fifo:in_valid
	wire  [102:0] data_mem_s2_agent_rf_source_data;                                                            // data_mem_s2_agent:rf_source_data -> data_mem_s2_agent_rsp_fifo:in_data
	wire          data_mem_s2_agent_rf_source_ready;                                                           // data_mem_s2_agent_rsp_fifo:in_ready -> data_mem_s2_agent:rf_source_ready
	wire          data_mem_s2_agent_rf_source_startofpacket;                                                   // data_mem_s2_agent:rf_source_startofpacket -> data_mem_s2_agent_rsp_fifo:in_startofpacket
	wire          data_mem_s2_agent_rf_source_endofpacket;                                                     // data_mem_s2_agent:rf_source_endofpacket -> data_mem_s2_agent_rsp_fifo:in_endofpacket
	wire          data_mem_s2_agent_rsp_fifo_out_valid;                                                        // data_mem_s2_agent_rsp_fifo:out_valid -> data_mem_s2_agent:rf_sink_valid
	wire  [102:0] data_mem_s2_agent_rsp_fifo_out_data;                                                         // data_mem_s2_agent_rsp_fifo:out_data -> data_mem_s2_agent:rf_sink_data
	wire          data_mem_s2_agent_rsp_fifo_out_ready;                                                        // data_mem_s2_agent:rf_sink_ready -> data_mem_s2_agent_rsp_fifo:out_ready
	wire          data_mem_s2_agent_rsp_fifo_out_startofpacket;                                                // data_mem_s2_agent_rsp_fifo:out_startofpacket -> data_mem_s2_agent:rf_sink_startofpacket
	wire          data_mem_s2_agent_rsp_fifo_out_endofpacket;                                                  // data_mem_s2_agent_rsp_fifo:out_endofpacket -> data_mem_s2_agent:rf_sink_endofpacket
	wire          cmd_mux_001_src_valid;                                                                       // cmd_mux_001:src_valid -> data_mem_s2_agent:cp_valid
	wire  [101:0] cmd_mux_001_src_data;                                                                        // cmd_mux_001:src_data -> data_mem_s2_agent:cp_data
	wire          cmd_mux_001_src_ready;                                                                       // data_mem_s2_agent:cp_ready -> cmd_mux_001:src_ready
	wire    [1:0] cmd_mux_001_src_channel;                                                                     // cmd_mux_001:src_channel -> data_mem_s2_agent:cp_channel
	wire          cmd_mux_001_src_startofpacket;                                                               // cmd_mux_001:src_startofpacket -> data_mem_s2_agent:cp_startofpacket
	wire          cmd_mux_001_src_endofpacket;                                                                 // cmd_mux_001:src_endofpacket -> data_mem_s2_agent:cp_endofpacket
	wire          i2cslave_to_avlmm_bridge_0_avalon_master_agent_cp_valid;                                     // i2cslave_to_avlmm_bridge_0_avalon_master_agent:cp_valid -> router:sink_valid
	wire  [101:0] i2cslave_to_avlmm_bridge_0_avalon_master_agent_cp_data;                                      // i2cslave_to_avlmm_bridge_0_avalon_master_agent:cp_data -> router:sink_data
	wire          i2cslave_to_avlmm_bridge_0_avalon_master_agent_cp_ready;                                     // router:sink_ready -> i2cslave_to_avlmm_bridge_0_avalon_master_agent:cp_ready
	wire          i2cslave_to_avlmm_bridge_0_avalon_master_agent_cp_startofpacket;                             // i2cslave_to_avlmm_bridge_0_avalon_master_agent:cp_startofpacket -> router:sink_startofpacket
	wire          i2cslave_to_avlmm_bridge_0_avalon_master_agent_cp_endofpacket;                               // i2cslave_to_avlmm_bridge_0_avalon_master_agent:cp_endofpacket -> router:sink_endofpacket
	wire          led_s1_agent_rp_valid;                                                                       // led_s1_agent:rp_valid -> router_001:sink_valid
	wire  [101:0] led_s1_agent_rp_data;                                                                        // led_s1_agent:rp_data -> router_001:sink_data
	wire          led_s1_agent_rp_ready;                                                                       // router_001:sink_ready -> led_s1_agent:rp_ready
	wire          led_s1_agent_rp_startofpacket;                                                               // led_s1_agent:rp_startofpacket -> router_001:sink_startofpacket
	wire          led_s1_agent_rp_endofpacket;                                                                 // led_s1_agent:rp_endofpacket -> router_001:sink_endofpacket
	wire          router_001_src_valid;                                                                        // router_001:src_valid -> rsp_demux:sink_valid
	wire  [101:0] router_001_src_data;                                                                         // router_001:src_data -> rsp_demux:sink_data
	wire          router_001_src_ready;                                                                        // rsp_demux:sink_ready -> router_001:src_ready
	wire    [1:0] router_001_src_channel;                                                                      // router_001:src_channel -> rsp_demux:sink_channel
	wire          router_001_src_startofpacket;                                                                // router_001:src_startofpacket -> rsp_demux:sink_startofpacket
	wire          router_001_src_endofpacket;                                                                  // router_001:src_endofpacket -> rsp_demux:sink_endofpacket
	wire          data_mem_s2_agent_rp_valid;                                                                  // data_mem_s2_agent:rp_valid -> router_002:sink_valid
	wire  [101:0] data_mem_s2_agent_rp_data;                                                                   // data_mem_s2_agent:rp_data -> router_002:sink_data
	wire          data_mem_s2_agent_rp_ready;                                                                  // router_002:sink_ready -> data_mem_s2_agent:rp_ready
	wire          data_mem_s2_agent_rp_startofpacket;                                                          // data_mem_s2_agent:rp_startofpacket -> router_002:sink_startofpacket
	wire          data_mem_s2_agent_rp_endofpacket;                                                            // data_mem_s2_agent:rp_endofpacket -> router_002:sink_endofpacket
	wire          router_002_src_valid;                                                                        // router_002:src_valid -> rsp_demux_001:sink_valid
	wire  [101:0] router_002_src_data;                                                                         // router_002:src_data -> rsp_demux_001:sink_data
	wire          router_002_src_ready;                                                                        // rsp_demux_001:sink_ready -> router_002:src_ready
	wire    [1:0] router_002_src_channel;                                                                      // router_002:src_channel -> rsp_demux_001:sink_channel
	wire          router_002_src_startofpacket;                                                                // router_002:src_startofpacket -> rsp_demux_001:sink_startofpacket
	wire          router_002_src_endofpacket;                                                                  // router_002:src_endofpacket -> rsp_demux_001:sink_endofpacket
	wire          router_src_valid;                                                                            // router:src_valid -> i2cslave_to_avlmm_bridge_0_avalon_master_limiter:cmd_sink_valid
	wire  [101:0] router_src_data;                                                                             // router:src_data -> i2cslave_to_avlmm_bridge_0_avalon_master_limiter:cmd_sink_data
	wire          router_src_ready;                                                                            // i2cslave_to_avlmm_bridge_0_avalon_master_limiter:cmd_sink_ready -> router:src_ready
	wire    [1:0] router_src_channel;                                                                          // router:src_channel -> i2cslave_to_avlmm_bridge_0_avalon_master_limiter:cmd_sink_channel
	wire          router_src_startofpacket;                                                                    // router:src_startofpacket -> i2cslave_to_avlmm_bridge_0_avalon_master_limiter:cmd_sink_startofpacket
	wire          router_src_endofpacket;                                                                      // router:src_endofpacket -> i2cslave_to_avlmm_bridge_0_avalon_master_limiter:cmd_sink_endofpacket
	wire  [101:0] i2cslave_to_avlmm_bridge_0_avalon_master_limiter_cmd_src_data;                               // i2cslave_to_avlmm_bridge_0_avalon_master_limiter:cmd_src_data -> cmd_demux:sink_data
	wire          i2cslave_to_avlmm_bridge_0_avalon_master_limiter_cmd_src_ready;                              // cmd_demux:sink_ready -> i2cslave_to_avlmm_bridge_0_avalon_master_limiter:cmd_src_ready
	wire    [1:0] i2cslave_to_avlmm_bridge_0_avalon_master_limiter_cmd_src_channel;                            // i2cslave_to_avlmm_bridge_0_avalon_master_limiter:cmd_src_channel -> cmd_demux:sink_channel
	wire          i2cslave_to_avlmm_bridge_0_avalon_master_limiter_cmd_src_startofpacket;                      // i2cslave_to_avlmm_bridge_0_avalon_master_limiter:cmd_src_startofpacket -> cmd_demux:sink_startofpacket
	wire          i2cslave_to_avlmm_bridge_0_avalon_master_limiter_cmd_src_endofpacket;                        // i2cslave_to_avlmm_bridge_0_avalon_master_limiter:cmd_src_endofpacket -> cmd_demux:sink_endofpacket
	wire          rsp_mux_src_valid;                                                                           // rsp_mux:src_valid -> i2cslave_to_avlmm_bridge_0_avalon_master_limiter:rsp_sink_valid
	wire  [101:0] rsp_mux_src_data;                                                                            // rsp_mux:src_data -> i2cslave_to_avlmm_bridge_0_avalon_master_limiter:rsp_sink_data
	wire          rsp_mux_src_ready;                                                                           // i2cslave_to_avlmm_bridge_0_avalon_master_limiter:rsp_sink_ready -> rsp_mux:src_ready
	wire    [1:0] rsp_mux_src_channel;                                                                         // rsp_mux:src_channel -> i2cslave_to_avlmm_bridge_0_avalon_master_limiter:rsp_sink_channel
	wire          rsp_mux_src_startofpacket;                                                                   // rsp_mux:src_startofpacket -> i2cslave_to_avlmm_bridge_0_avalon_master_limiter:rsp_sink_startofpacket
	wire          rsp_mux_src_endofpacket;                                                                     // rsp_mux:src_endofpacket -> i2cslave_to_avlmm_bridge_0_avalon_master_limiter:rsp_sink_endofpacket
	wire          i2cslave_to_avlmm_bridge_0_avalon_master_limiter_rsp_src_valid;                              // i2cslave_to_avlmm_bridge_0_avalon_master_limiter:rsp_src_valid -> i2cslave_to_avlmm_bridge_0_avalon_master_agent:rp_valid
	wire  [101:0] i2cslave_to_avlmm_bridge_0_avalon_master_limiter_rsp_src_data;                               // i2cslave_to_avlmm_bridge_0_avalon_master_limiter:rsp_src_data -> i2cslave_to_avlmm_bridge_0_avalon_master_agent:rp_data
	wire          i2cslave_to_avlmm_bridge_0_avalon_master_limiter_rsp_src_ready;                              // i2cslave_to_avlmm_bridge_0_avalon_master_agent:rp_ready -> i2cslave_to_avlmm_bridge_0_avalon_master_limiter:rsp_src_ready
	wire    [1:0] i2cslave_to_avlmm_bridge_0_avalon_master_limiter_rsp_src_channel;                            // i2cslave_to_avlmm_bridge_0_avalon_master_limiter:rsp_src_channel -> i2cslave_to_avlmm_bridge_0_avalon_master_agent:rp_channel
	wire          i2cslave_to_avlmm_bridge_0_avalon_master_limiter_rsp_src_startofpacket;                      // i2cslave_to_avlmm_bridge_0_avalon_master_limiter:rsp_src_startofpacket -> i2cslave_to_avlmm_bridge_0_avalon_master_agent:rp_startofpacket
	wire          i2cslave_to_avlmm_bridge_0_avalon_master_limiter_rsp_src_endofpacket;                        // i2cslave_to_avlmm_bridge_0_avalon_master_limiter:rsp_src_endofpacket -> i2cslave_to_avlmm_bridge_0_avalon_master_agent:rp_endofpacket
	wire          cmd_demux_src0_valid;                                                                        // cmd_demux:src0_valid -> cmd_mux:sink0_valid
	wire  [101:0] cmd_demux_src0_data;                                                                         // cmd_demux:src0_data -> cmd_mux:sink0_data
	wire          cmd_demux_src0_ready;                                                                        // cmd_mux:sink0_ready -> cmd_demux:src0_ready
	wire    [1:0] cmd_demux_src0_channel;                                                                      // cmd_demux:src0_channel -> cmd_mux:sink0_channel
	wire          cmd_demux_src0_startofpacket;                                                                // cmd_demux:src0_startofpacket -> cmd_mux:sink0_startofpacket
	wire          cmd_demux_src0_endofpacket;                                                                  // cmd_demux:src0_endofpacket -> cmd_mux:sink0_endofpacket
	wire          cmd_demux_src1_valid;                                                                        // cmd_demux:src1_valid -> cmd_mux_001:sink0_valid
	wire  [101:0] cmd_demux_src1_data;                                                                         // cmd_demux:src1_data -> cmd_mux_001:sink0_data
	wire          cmd_demux_src1_ready;                                                                        // cmd_mux_001:sink0_ready -> cmd_demux:src1_ready
	wire    [1:0] cmd_demux_src1_channel;                                                                      // cmd_demux:src1_channel -> cmd_mux_001:sink0_channel
	wire          cmd_demux_src1_startofpacket;                                                                // cmd_demux:src1_startofpacket -> cmd_mux_001:sink0_startofpacket
	wire          cmd_demux_src1_endofpacket;                                                                  // cmd_demux:src1_endofpacket -> cmd_mux_001:sink0_endofpacket
	wire          rsp_demux_src0_valid;                                                                        // rsp_demux:src0_valid -> rsp_mux:sink0_valid
	wire  [101:0] rsp_demux_src0_data;                                                                         // rsp_demux:src0_data -> rsp_mux:sink0_data
	wire          rsp_demux_src0_ready;                                                                        // rsp_mux:sink0_ready -> rsp_demux:src0_ready
	wire    [1:0] rsp_demux_src0_channel;                                                                      // rsp_demux:src0_channel -> rsp_mux:sink0_channel
	wire          rsp_demux_src0_startofpacket;                                                                // rsp_demux:src0_startofpacket -> rsp_mux:sink0_startofpacket
	wire          rsp_demux_src0_endofpacket;                                                                  // rsp_demux:src0_endofpacket -> rsp_mux:sink0_endofpacket
	wire          rsp_demux_001_src0_valid;                                                                    // rsp_demux_001:src0_valid -> rsp_mux:sink1_valid
	wire  [101:0] rsp_demux_001_src0_data;                                                                     // rsp_demux_001:src0_data -> rsp_mux:sink1_data
	wire          rsp_demux_001_src0_ready;                                                                    // rsp_mux:sink1_ready -> rsp_demux_001:src0_ready
	wire    [1:0] rsp_demux_001_src0_channel;                                                                  // rsp_demux_001:src0_channel -> rsp_mux:sink1_channel
	wire          rsp_demux_001_src0_startofpacket;                                                            // rsp_demux_001:src0_startofpacket -> rsp_mux:sink1_startofpacket
	wire          rsp_demux_001_src0_endofpacket;                                                              // rsp_demux_001:src0_endofpacket -> rsp_mux:sink1_endofpacket
	wire    [1:0] i2cslave_to_avlmm_bridge_0_avalon_master_limiter_cmd_valid_data;                             // i2cslave_to_avlmm_bridge_0_avalon_master_limiter:cmd_src_valid -> cmd_demux:sink_valid
	wire          led_s1_agent_rdata_fifo_src_valid;                                                           // led_s1_agent:rdata_fifo_src_valid -> avalon_st_adapter:in_0_valid
	wire   [33:0] led_s1_agent_rdata_fifo_src_data;                                                            // led_s1_agent:rdata_fifo_src_data -> avalon_st_adapter:in_0_data
	wire          led_s1_agent_rdata_fifo_src_ready;                                                           // avalon_st_adapter:in_0_ready -> led_s1_agent:rdata_fifo_src_ready
	wire          avalon_st_adapter_out_0_valid;                                                               // avalon_st_adapter:out_0_valid -> led_s1_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_out_0_data;                                                                // avalon_st_adapter:out_0_data -> led_s1_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_out_0_ready;                                                               // led_s1_agent:rdata_fifo_sink_ready -> avalon_st_adapter:out_0_ready
	wire    [0:0] avalon_st_adapter_out_0_error;                                                               // avalon_st_adapter:out_0_error -> led_s1_agent:rdata_fifo_sink_error
	wire          data_mem_s2_agent_rdata_fifo_src_valid;                                                      // data_mem_s2_agent:rdata_fifo_src_valid -> avalon_st_adapter_001:in_0_valid
	wire   [33:0] data_mem_s2_agent_rdata_fifo_src_data;                                                       // data_mem_s2_agent:rdata_fifo_src_data -> avalon_st_adapter_001:in_0_data
	wire          data_mem_s2_agent_rdata_fifo_src_ready;                                                      // avalon_st_adapter_001:in_0_ready -> data_mem_s2_agent:rdata_fifo_src_ready
	wire          avalon_st_adapter_001_out_0_valid;                                                           // avalon_st_adapter_001:out_0_valid -> data_mem_s2_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_001_out_0_data;                                                            // avalon_st_adapter_001:out_0_data -> data_mem_s2_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_001_out_0_ready;                                                           // data_mem_s2_agent:rdata_fifo_sink_ready -> avalon_st_adapter_001:out_0_ready
	wire    [0:0] avalon_st_adapter_001_out_0_error;                                                           // avalon_st_adapter_001:out_0_error -> data_mem_s2_agent:rdata_fifo_sink_error

	altera_merlin_master_translator #(
		.AV_ADDRESS_W                (32),
		.AV_DATA_W                   (32),
		.AV_BURSTCOUNT_W             (1),
		.AV_BYTEENABLE_W             (4),
		.UAV_ADDRESS_W               (32),
		.UAV_BURSTCOUNT_W            (3),
		.USE_READ                    (1),
		.USE_WRITE                   (1),
		.USE_BEGINBURSTTRANSFER      (0),
		.USE_BEGINTRANSFER           (0),
		.USE_CHIPSELECT              (0),
		.USE_BURSTCOUNT              (0),
		.USE_READDATAVALID           (1),
		.USE_WAITREQUEST             (1),
		.USE_READRESPONSE            (0),
		.USE_WRITERESPONSE           (0),
		.AV_SYMBOLS_PER_WORD         (4),
		.AV_ADDRESS_SYMBOLS          (1),
		.AV_BURSTCOUNT_SYMBOLS       (0),
		.AV_CONSTANT_BURST_BEHAVIOR  (0),
		.UAV_CONSTANT_BURST_BEHAVIOR (0),
		.AV_LINEWRAPBURSTS           (0),
		.AV_REGISTERINCOMINGSIGNALS  (0)
	) i2cslave_to_avlmm_bridge_0_avalon_master_translator (
		.clk                    (clk_50_clk_clk),                                                                              //                       clk.clk
		.reset                  (i2cslave_to_avlmm_bridge_0_reset_reset_bridge_in_reset_reset),                                //                     reset.reset
		.uav_address            (i2cslave_to_avlmm_bridge_0_avalon_master_translator_avalon_universal_master_0_address),       // avalon_universal_master_0.address
		.uav_burstcount         (i2cslave_to_avlmm_bridge_0_avalon_master_translator_avalon_universal_master_0_burstcount),    //                          .burstcount
		.uav_read               (i2cslave_to_avlmm_bridge_0_avalon_master_translator_avalon_universal_master_0_read),          //                          .read
		.uav_write              (i2cslave_to_avlmm_bridge_0_avalon_master_translator_avalon_universal_master_0_write),         //                          .write
		.uav_waitrequest        (i2cslave_to_avlmm_bridge_0_avalon_master_translator_avalon_universal_master_0_waitrequest),   //                          .waitrequest
		.uav_readdatavalid      (i2cslave_to_avlmm_bridge_0_avalon_master_translator_avalon_universal_master_0_readdatavalid), //                          .readdatavalid
		.uav_byteenable         (i2cslave_to_avlmm_bridge_0_avalon_master_translator_avalon_universal_master_0_byteenable),    //                          .byteenable
		.uav_readdata           (i2cslave_to_avlmm_bridge_0_avalon_master_translator_avalon_universal_master_0_readdata),      //                          .readdata
		.uav_writedata          (i2cslave_to_avlmm_bridge_0_avalon_master_translator_avalon_universal_master_0_writedata),     //                          .writedata
		.uav_lock               (i2cslave_to_avlmm_bridge_0_avalon_master_translator_avalon_universal_master_0_lock),          //                          .lock
		.uav_debugaccess        (i2cslave_to_avlmm_bridge_0_avalon_master_translator_avalon_universal_master_0_debugaccess),   //                          .debugaccess
		.av_address             (i2cslave_to_avlmm_bridge_0_avalon_master_address),                                            //      avalon_anti_master_0.address
		.av_waitrequest         (i2cslave_to_avlmm_bridge_0_avalon_master_waitrequest),                                        //                          .waitrequest
		.av_byteenable          (i2cslave_to_avlmm_bridge_0_avalon_master_byteenable),                                         //                          .byteenable
		.av_read                (i2cslave_to_avlmm_bridge_0_avalon_master_read),                                               //                          .read
		.av_readdata            (i2cslave_to_avlmm_bridge_0_avalon_master_readdata),                                           //                          .readdata
		.av_readdatavalid       (i2cslave_to_avlmm_bridge_0_avalon_master_readdatavalid),                                      //                          .readdatavalid
		.av_write               (i2cslave_to_avlmm_bridge_0_avalon_master_write),                                              //                          .write
		.av_writedata           (i2cslave_to_avlmm_bridge_0_avalon_master_writedata),                                          //                          .writedata
		.av_burstcount          (1'b1),                                                                                        //               (terminated)
		.av_beginbursttransfer  (1'b0),                                                                                        //               (terminated)
		.av_begintransfer       (1'b0),                                                                                        //               (terminated)
		.av_chipselect          (1'b0),                                                                                        //               (terminated)
		.av_lock                (1'b0),                                                                                        //               (terminated)
		.av_debugaccess         (1'b0),                                                                                        //               (terminated)
		.uav_clken              (),                                                                                            //               (terminated)
		.av_clken               (1'b1),                                                                                        //               (terminated)
		.uav_response           (2'b00),                                                                                       //               (terminated)
		.av_response            (),                                                                                            //               (terminated)
		.uav_writeresponsevalid (1'b0),                                                                                        //               (terminated)
		.av_writeresponsevalid  ()                                                                                             //               (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) led_s1_translator (
		.clk                    (clk_50_clk_clk),                                               //                      clk.clk
		.reset                  (i2cslave_to_avlmm_bridge_0_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (led_s1_agent_m0_address),                                      // avalon_universal_slave_0.address
		.uav_burstcount         (led_s1_agent_m0_burstcount),                                   //                         .burstcount
		.uav_read               (led_s1_agent_m0_read),                                         //                         .read
		.uav_write              (led_s1_agent_m0_write),                                        //                         .write
		.uav_waitrequest        (led_s1_agent_m0_waitrequest),                                  //                         .waitrequest
		.uav_readdatavalid      (led_s1_agent_m0_readdatavalid),                                //                         .readdatavalid
		.uav_byteenable         (led_s1_agent_m0_byteenable),                                   //                         .byteenable
		.uav_readdata           (led_s1_agent_m0_readdata),                                     //                         .readdata
		.uav_writedata          (led_s1_agent_m0_writedata),                                    //                         .writedata
		.uav_lock               (led_s1_agent_m0_lock),                                         //                         .lock
		.uav_debugaccess        (led_s1_agent_m0_debugaccess),                                  //                         .debugaccess
		.av_address             (led_s1_address),                                               //      avalon_anti_slave_0.address
		.av_write               (led_s1_write),                                                 //                         .write
		.av_readdata            (led_s1_readdata),                                              //                         .readdata
		.av_writedata           (led_s1_writedata),                                             //                         .writedata
		.av_chipselect          (led_s1_chipselect),                                            //                         .chipselect
		.av_read                (),                                                             //              (terminated)
		.av_begintransfer       (),                                                             //              (terminated)
		.av_beginbursttransfer  (),                                                             //              (terminated)
		.av_burstcount          (),                                                             //              (terminated)
		.av_byteenable          (),                                                             //              (terminated)
		.av_readdatavalid       (1'b0),                                                         //              (terminated)
		.av_waitrequest         (1'b0),                                                         //              (terminated)
		.av_writebyteenable     (),                                                             //              (terminated)
		.av_lock                (),                                                             //              (terminated)
		.av_clken               (),                                                             //              (terminated)
		.uav_clken              (1'b0),                                                         //              (terminated)
		.av_debugaccess         (),                                                             //              (terminated)
		.av_outputenable        (),                                                             //              (terminated)
		.uav_response           (),                                                             //              (terminated)
		.av_response            (2'b00),                                                        //              (terminated)
		.uav_writeresponsevalid (),                                                             //              (terminated)
		.av_writeresponsevalid  (1'b0)                                                          //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (8),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (1),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (0),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) data_mem_s2_translator (
		.clk                    (clk_50_clk_clk),                              //                      clk.clk
		.reset                  (data_mem_reset2_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (data_mem_s2_agent_m0_address),                // avalon_universal_slave_0.address
		.uav_burstcount         (data_mem_s2_agent_m0_burstcount),             //                         .burstcount
		.uav_read               (data_mem_s2_agent_m0_read),                   //                         .read
		.uav_write              (data_mem_s2_agent_m0_write),                  //                         .write
		.uav_waitrequest        (data_mem_s2_agent_m0_waitrequest),            //                         .waitrequest
		.uav_readdatavalid      (data_mem_s2_agent_m0_readdatavalid),          //                         .readdatavalid
		.uav_byteenable         (data_mem_s2_agent_m0_byteenable),             //                         .byteenable
		.uav_readdata           (data_mem_s2_agent_m0_readdata),               //                         .readdata
		.uav_writedata          (data_mem_s2_agent_m0_writedata),              //                         .writedata
		.uav_lock               (data_mem_s2_agent_m0_lock),                   //                         .lock
		.uav_debugaccess        (data_mem_s2_agent_m0_debugaccess),            //                         .debugaccess
		.av_address             (data_mem_s2_address),                         //      avalon_anti_slave_0.address
		.av_write               (data_mem_s2_write),                           //                         .write
		.av_readdata            (data_mem_s2_readdata),                        //                         .readdata
		.av_writedata           (data_mem_s2_writedata),                       //                         .writedata
		.av_byteenable          (data_mem_s2_byteenable),                      //                         .byteenable
		.av_chipselect          (data_mem_s2_chipselect),                      //                         .chipselect
		.av_clken               (data_mem_s2_clken),                           //                         .clken
		.av_read                (),                                            //              (terminated)
		.av_begintransfer       (),                                            //              (terminated)
		.av_beginbursttransfer  (),                                            //              (terminated)
		.av_burstcount          (),                                            //              (terminated)
		.av_readdatavalid       (1'b0),                                        //              (terminated)
		.av_waitrequest         (1'b0),                                        //              (terminated)
		.av_writebyteenable     (),                                            //              (terminated)
		.av_lock                (),                                            //              (terminated)
		.uav_clken              (1'b0),                                        //              (terminated)
		.av_debugaccess         (),                                            //              (terminated)
		.av_outputenable        (),                                            //              (terminated)
		.uav_response           (),                                            //              (terminated)
		.av_response            (2'b00),                                       //              (terminated)
		.uav_writeresponsevalid (),                                            //              (terminated)
		.av_writeresponsevalid  (1'b0)                                         //              (terminated)
	);

	altera_merlin_master_agent #(
		.PKT_ORI_BURST_SIZE_H      (101),
		.PKT_ORI_BURST_SIZE_L      (99),
		.PKT_RESPONSE_STATUS_H     (98),
		.PKT_RESPONSE_STATUS_L     (97),
		.PKT_QOS_H                 (86),
		.PKT_QOS_L                 (86),
		.PKT_DATA_SIDEBAND_H       (84),
		.PKT_DATA_SIDEBAND_L       (84),
		.PKT_ADDR_SIDEBAND_H       (83),
		.PKT_ADDR_SIDEBAND_L       (83),
		.PKT_BURST_TYPE_H          (82),
		.PKT_BURST_TYPE_L          (81),
		.PKT_CACHE_H               (96),
		.PKT_CACHE_L               (93),
		.PKT_THREAD_ID_H           (89),
		.PKT_THREAD_ID_L           (89),
		.PKT_BURST_SIZE_H          (80),
		.PKT_BURST_SIZE_L          (78),
		.PKT_TRANS_EXCLUSIVE       (73),
		.PKT_TRANS_LOCK            (72),
		.PKT_BEGIN_BURST           (85),
		.PKT_PROTECTION_H          (92),
		.PKT_PROTECTION_L          (90),
		.PKT_BURSTWRAP_H           (77),
		.PKT_BURSTWRAP_L           (77),
		.PKT_BYTE_CNT_H            (76),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (87),
		.PKT_SRC_ID_L              (87),
		.PKT_DEST_ID_H             (88),
		.PKT_DEST_ID_L             (88),
		.ST_DATA_W                 (102),
		.ST_CHANNEL_W              (2),
		.AV_BURSTCOUNT_W           (3),
		.SUPPRESS_0_BYTEEN_RSP     (0),
		.ID                        (0),
		.BURSTWRAP_VALUE           (1),
		.CACHE_VALUE               (0),
		.SECURE_ACCESS_BIT         (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0)
	) i2cslave_to_avlmm_bridge_0_avalon_master_agent (
		.clk                   (clk_50_clk_clk),                                                                              //       clk.clk
		.reset                 (i2cslave_to_avlmm_bridge_0_reset_reset_bridge_in_reset_reset),                                // clk_reset.reset
		.av_address            (i2cslave_to_avlmm_bridge_0_avalon_master_translator_avalon_universal_master_0_address),       //        av.address
		.av_write              (i2cslave_to_avlmm_bridge_0_avalon_master_translator_avalon_universal_master_0_write),         //          .write
		.av_read               (i2cslave_to_avlmm_bridge_0_avalon_master_translator_avalon_universal_master_0_read),          //          .read
		.av_writedata          (i2cslave_to_avlmm_bridge_0_avalon_master_translator_avalon_universal_master_0_writedata),     //          .writedata
		.av_readdata           (i2cslave_to_avlmm_bridge_0_avalon_master_translator_avalon_universal_master_0_readdata),      //          .readdata
		.av_waitrequest        (i2cslave_to_avlmm_bridge_0_avalon_master_translator_avalon_universal_master_0_waitrequest),   //          .waitrequest
		.av_readdatavalid      (i2cslave_to_avlmm_bridge_0_avalon_master_translator_avalon_universal_master_0_readdatavalid), //          .readdatavalid
		.av_byteenable         (i2cslave_to_avlmm_bridge_0_avalon_master_translator_avalon_universal_master_0_byteenable),    //          .byteenable
		.av_burstcount         (i2cslave_to_avlmm_bridge_0_avalon_master_translator_avalon_universal_master_0_burstcount),    //          .burstcount
		.av_debugaccess        (i2cslave_to_avlmm_bridge_0_avalon_master_translator_avalon_universal_master_0_debugaccess),   //          .debugaccess
		.av_lock               (i2cslave_to_avlmm_bridge_0_avalon_master_translator_avalon_universal_master_0_lock),          //          .lock
		.cp_valid              (i2cslave_to_avlmm_bridge_0_avalon_master_agent_cp_valid),                                     //        cp.valid
		.cp_data               (i2cslave_to_avlmm_bridge_0_avalon_master_agent_cp_data),                                      //          .data
		.cp_startofpacket      (i2cslave_to_avlmm_bridge_0_avalon_master_agent_cp_startofpacket),                             //          .startofpacket
		.cp_endofpacket        (i2cslave_to_avlmm_bridge_0_avalon_master_agent_cp_endofpacket),                               //          .endofpacket
		.cp_ready              (i2cslave_to_avlmm_bridge_0_avalon_master_agent_cp_ready),                                     //          .ready
		.rp_valid              (i2cslave_to_avlmm_bridge_0_avalon_master_limiter_rsp_src_valid),                              //        rp.valid
		.rp_data               (i2cslave_to_avlmm_bridge_0_avalon_master_limiter_rsp_src_data),                               //          .data
		.rp_channel            (i2cslave_to_avlmm_bridge_0_avalon_master_limiter_rsp_src_channel),                            //          .channel
		.rp_startofpacket      (i2cslave_to_avlmm_bridge_0_avalon_master_limiter_rsp_src_startofpacket),                      //          .startofpacket
		.rp_endofpacket        (i2cslave_to_avlmm_bridge_0_avalon_master_limiter_rsp_src_endofpacket),                        //          .endofpacket
		.rp_ready              (i2cslave_to_avlmm_bridge_0_avalon_master_limiter_rsp_src_ready),                              //          .ready
		.av_response           (),                                                                                            // (terminated)
		.av_writeresponsevalid ()                                                                                             // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (101),
		.PKT_ORI_BURST_SIZE_L      (99),
		.PKT_RESPONSE_STATUS_H     (98),
		.PKT_RESPONSE_STATUS_L     (97),
		.PKT_BURST_SIZE_H          (80),
		.PKT_BURST_SIZE_L          (78),
		.PKT_TRANS_LOCK            (72),
		.PKT_BEGIN_BURST           (85),
		.PKT_PROTECTION_H          (92),
		.PKT_PROTECTION_L          (90),
		.PKT_BURSTWRAP_H           (77),
		.PKT_BURSTWRAP_L           (77),
		.PKT_BYTE_CNT_H            (76),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (87),
		.PKT_SRC_ID_L              (87),
		.PKT_DEST_ID_H             (88),
		.PKT_DEST_ID_L             (88),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (2),
		.ST_DATA_W                 (102),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) led_s1_agent (
		.clk                     (clk_50_clk_clk),                                               //             clk.clk
		.reset                   (i2cslave_to_avlmm_bridge_0_reset_reset_bridge_in_reset_reset), //       clk_reset.reset
		.m0_address              (led_s1_agent_m0_address),                                      //              m0.address
		.m0_burstcount           (led_s1_agent_m0_burstcount),                                   //                .burstcount
		.m0_byteenable           (led_s1_agent_m0_byteenable),                                   //                .byteenable
		.m0_debugaccess          (led_s1_agent_m0_debugaccess),                                  //                .debugaccess
		.m0_lock                 (led_s1_agent_m0_lock),                                         //                .lock
		.m0_readdata             (led_s1_agent_m0_readdata),                                     //                .readdata
		.m0_readdatavalid        (led_s1_agent_m0_readdatavalid),                                //                .readdatavalid
		.m0_read                 (led_s1_agent_m0_read),                                         //                .read
		.m0_waitrequest          (led_s1_agent_m0_waitrequest),                                  //                .waitrequest
		.m0_writedata            (led_s1_agent_m0_writedata),                                    //                .writedata
		.m0_write                (led_s1_agent_m0_write),                                        //                .write
		.rp_endofpacket          (led_s1_agent_rp_endofpacket),                                  //              rp.endofpacket
		.rp_ready                (led_s1_agent_rp_ready),                                        //                .ready
		.rp_valid                (led_s1_agent_rp_valid),                                        //                .valid
		.rp_data                 (led_s1_agent_rp_data),                                         //                .data
		.rp_startofpacket        (led_s1_agent_rp_startofpacket),                                //                .startofpacket
		.cp_ready                (cmd_mux_src_ready),                                            //              cp.ready
		.cp_valid                (cmd_mux_src_valid),                                            //                .valid
		.cp_data                 (cmd_mux_src_data),                                             //                .data
		.cp_startofpacket        (cmd_mux_src_startofpacket),                                    //                .startofpacket
		.cp_endofpacket          (cmd_mux_src_endofpacket),                                      //                .endofpacket
		.cp_channel              (cmd_mux_src_channel),                                          //                .channel
		.rf_sink_ready           (led_s1_agent_rsp_fifo_out_ready),                              //         rf_sink.ready
		.rf_sink_valid           (led_s1_agent_rsp_fifo_out_valid),                              //                .valid
		.rf_sink_startofpacket   (led_s1_agent_rsp_fifo_out_startofpacket),                      //                .startofpacket
		.rf_sink_endofpacket     (led_s1_agent_rsp_fifo_out_endofpacket),                        //                .endofpacket
		.rf_sink_data            (led_s1_agent_rsp_fifo_out_data),                               //                .data
		.rf_source_ready         (led_s1_agent_rf_source_ready),                                 //       rf_source.ready
		.rf_source_valid         (led_s1_agent_rf_source_valid),                                 //                .valid
		.rf_source_startofpacket (led_s1_agent_rf_source_startofpacket),                         //                .startofpacket
		.rf_source_endofpacket   (led_s1_agent_rf_source_endofpacket),                           //                .endofpacket
		.rf_source_data          (led_s1_agent_rf_source_data),                                  //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_out_0_ready),                                // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_out_0_valid),                                //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_out_0_data),                                 //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_out_0_error),                                //                .error
		.rdata_fifo_src_ready    (led_s1_agent_rdata_fifo_src_ready),                            //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (led_s1_agent_rdata_fifo_src_valid),                            //                .valid
		.rdata_fifo_src_data     (led_s1_agent_rdata_fifo_src_data),                             //                .data
		.m0_response             (2'b00),                                                        //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                          //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (103),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) led_s1_agent_rsp_fifo (
		.clk               (clk_50_clk_clk),                                               //       clk.clk
		.reset             (i2cslave_to_avlmm_bridge_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (led_s1_agent_rf_source_data),                                  //        in.data
		.in_valid          (led_s1_agent_rf_source_valid),                                 //          .valid
		.in_ready          (led_s1_agent_rf_source_ready),                                 //          .ready
		.in_startofpacket  (led_s1_agent_rf_source_startofpacket),                         //          .startofpacket
		.in_endofpacket    (led_s1_agent_rf_source_endofpacket),                           //          .endofpacket
		.out_data          (led_s1_agent_rsp_fifo_out_data),                               //       out.data
		.out_valid         (led_s1_agent_rsp_fifo_out_valid),                              //          .valid
		.out_ready         (led_s1_agent_rsp_fifo_out_ready),                              //          .ready
		.out_startofpacket (led_s1_agent_rsp_fifo_out_startofpacket),                      //          .startofpacket
		.out_endofpacket   (led_s1_agent_rsp_fifo_out_endofpacket),                        //          .endofpacket
		.csr_address       (2'b00),                                                        // (terminated)
		.csr_read          (1'b0),                                                         // (terminated)
		.csr_write         (1'b0),                                                         // (terminated)
		.csr_readdata      (),                                                             // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                         // (terminated)
		.almost_full_data  (),                                                             // (terminated)
		.almost_empty_data (),                                                             // (terminated)
		.in_empty          (1'b0),                                                         // (terminated)
		.out_empty         (),                                                             // (terminated)
		.in_error          (1'b0),                                                         // (terminated)
		.out_error         (),                                                             // (terminated)
		.in_channel        (1'b0),                                                         // (terminated)
		.out_channel       ()                                                              // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (101),
		.PKT_ORI_BURST_SIZE_L      (99),
		.PKT_RESPONSE_STATUS_H     (98),
		.PKT_RESPONSE_STATUS_L     (97),
		.PKT_BURST_SIZE_H          (80),
		.PKT_BURST_SIZE_L          (78),
		.PKT_TRANS_LOCK            (72),
		.PKT_BEGIN_BURST           (85),
		.PKT_PROTECTION_H          (92),
		.PKT_PROTECTION_L          (90),
		.PKT_BURSTWRAP_H           (77),
		.PKT_BURSTWRAP_L           (77),
		.PKT_BYTE_CNT_H            (76),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (87),
		.PKT_SRC_ID_L              (87),
		.PKT_DEST_ID_H             (88),
		.PKT_DEST_ID_L             (88),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (2),
		.ST_DATA_W                 (102),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) data_mem_s2_agent (
		.clk                     (clk_50_clk_clk),                               //             clk.clk
		.reset                   (data_mem_reset2_reset_bridge_in_reset_reset),  //       clk_reset.reset
		.m0_address              (data_mem_s2_agent_m0_address),                 //              m0.address
		.m0_burstcount           (data_mem_s2_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (data_mem_s2_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (data_mem_s2_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (data_mem_s2_agent_m0_lock),                    //                .lock
		.m0_readdata             (data_mem_s2_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (data_mem_s2_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (data_mem_s2_agent_m0_read),                    //                .read
		.m0_waitrequest          (data_mem_s2_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (data_mem_s2_agent_m0_writedata),               //                .writedata
		.m0_write                (data_mem_s2_agent_m0_write),                   //                .write
		.rp_endofpacket          (data_mem_s2_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (data_mem_s2_agent_rp_ready),                   //                .ready
		.rp_valid                (data_mem_s2_agent_rp_valid),                   //                .valid
		.rp_data                 (data_mem_s2_agent_rp_data),                    //                .data
		.rp_startofpacket        (data_mem_s2_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (cmd_mux_001_src_ready),                        //              cp.ready
		.cp_valid                (cmd_mux_001_src_valid),                        //                .valid
		.cp_data                 (cmd_mux_001_src_data),                         //                .data
		.cp_startofpacket        (cmd_mux_001_src_startofpacket),                //                .startofpacket
		.cp_endofpacket          (cmd_mux_001_src_endofpacket),                  //                .endofpacket
		.cp_channel              (cmd_mux_001_src_channel),                      //                .channel
		.rf_sink_ready           (data_mem_s2_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (data_mem_s2_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (data_mem_s2_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (data_mem_s2_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (data_mem_s2_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (data_mem_s2_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (data_mem_s2_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (data_mem_s2_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (data_mem_s2_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (data_mem_s2_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_001_out_0_ready),            // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_001_out_0_valid),            //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_001_out_0_data),             //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_001_out_0_error),            //                .error
		.rdata_fifo_src_ready    (data_mem_s2_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (data_mem_s2_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (data_mem_s2_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                        //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                          //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (103),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) data_mem_s2_agent_rsp_fifo (
		.clk               (clk_50_clk_clk),                               //       clk.clk
		.reset             (data_mem_reset2_reset_bridge_in_reset_reset),  // clk_reset.reset
		.in_data           (data_mem_s2_agent_rf_source_data),             //        in.data
		.in_valid          (data_mem_s2_agent_rf_source_valid),            //          .valid
		.in_ready          (data_mem_s2_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (data_mem_s2_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (data_mem_s2_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (data_mem_s2_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (data_mem_s2_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (data_mem_s2_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (data_mem_s2_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (data_mem_s2_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                        // (terminated)
		.csr_read          (1'b0),                                         // (terminated)
		.csr_write         (1'b0),                                         // (terminated)
		.csr_readdata      (),                                             // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),         // (terminated)
		.almost_full_data  (),                                             // (terminated)
		.almost_empty_data (),                                             // (terminated)
		.in_empty          (1'b0),                                         // (terminated)
		.out_empty         (),                                             // (terminated)
		.in_error          (1'b0),                                         // (terminated)
		.out_error         (),                                             // (terminated)
		.in_channel        (1'b0),                                         // (terminated)
		.out_channel       ()                                              // (terminated)
	);

	Qsys_mm_interconnect_0_router router (
		.sink_ready         (i2cslave_to_avlmm_bridge_0_avalon_master_agent_cp_ready),         //      sink.ready
		.sink_valid         (i2cslave_to_avlmm_bridge_0_avalon_master_agent_cp_valid),         //          .valid
		.sink_data          (i2cslave_to_avlmm_bridge_0_avalon_master_agent_cp_data),          //          .data
		.sink_startofpacket (i2cslave_to_avlmm_bridge_0_avalon_master_agent_cp_startofpacket), //          .startofpacket
		.sink_endofpacket   (i2cslave_to_avlmm_bridge_0_avalon_master_agent_cp_endofpacket),   //          .endofpacket
		.clk                (clk_50_clk_clk),                                                  //       clk.clk
		.reset              (i2cslave_to_avlmm_bridge_0_reset_reset_bridge_in_reset_reset),    // clk_reset.reset
		.src_ready          (router_src_ready),                                                //       src.ready
		.src_valid          (router_src_valid),                                                //          .valid
		.src_data           (router_src_data),                                                 //          .data
		.src_channel        (router_src_channel),                                              //          .channel
		.src_startofpacket  (router_src_startofpacket),                                        //          .startofpacket
		.src_endofpacket    (router_src_endofpacket)                                           //          .endofpacket
	);

	Qsys_mm_interconnect_0_router_001 router_001 (
		.sink_ready         (led_s1_agent_rp_ready),                                        //      sink.ready
		.sink_valid         (led_s1_agent_rp_valid),                                        //          .valid
		.sink_data          (led_s1_agent_rp_data),                                         //          .data
		.sink_startofpacket (led_s1_agent_rp_startofpacket),                                //          .startofpacket
		.sink_endofpacket   (led_s1_agent_rp_endofpacket),                                  //          .endofpacket
		.clk                (clk_50_clk_clk),                                               //       clk.clk
		.reset              (i2cslave_to_avlmm_bridge_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_001_src_ready),                                         //       src.ready
		.src_valid          (router_001_src_valid),                                         //          .valid
		.src_data           (router_001_src_data),                                          //          .data
		.src_channel        (router_001_src_channel),                                       //          .channel
		.src_startofpacket  (router_001_src_startofpacket),                                 //          .startofpacket
		.src_endofpacket    (router_001_src_endofpacket)                                    //          .endofpacket
	);

	Qsys_mm_interconnect_0_router_001 router_002 (
		.sink_ready         (data_mem_s2_agent_rp_ready),                  //      sink.ready
		.sink_valid         (data_mem_s2_agent_rp_valid),                  //          .valid
		.sink_data          (data_mem_s2_agent_rp_data),                   //          .data
		.sink_startofpacket (data_mem_s2_agent_rp_startofpacket),          //          .startofpacket
		.sink_endofpacket   (data_mem_s2_agent_rp_endofpacket),            //          .endofpacket
		.clk                (clk_50_clk_clk),                              //       clk.clk
		.reset              (data_mem_reset2_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_002_src_ready),                        //       src.ready
		.src_valid          (router_002_src_valid),                        //          .valid
		.src_data           (router_002_src_data),                         //          .data
		.src_channel        (router_002_src_channel),                      //          .channel
		.src_startofpacket  (router_002_src_startofpacket),                //          .startofpacket
		.src_endofpacket    (router_002_src_endofpacket)                   //          .endofpacket
	);

	altera_merlin_traffic_limiter #(
		.PKT_DEST_ID_H             (88),
		.PKT_DEST_ID_L             (88),
		.PKT_SRC_ID_H              (87),
		.PKT_SRC_ID_L              (87),
		.PKT_BYTE_CNT_H            (76),
		.PKT_BYTE_CNT_L            (74),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.MAX_OUTSTANDING_RESPONSES (1),
		.PIPELINED                 (0),
		.ST_DATA_W                 (102),
		.ST_CHANNEL_W              (2),
		.VALID_WIDTH               (2),
		.ENFORCE_ORDER             (1),
		.PREVENT_HAZARDS           (0),
		.SUPPORTS_POSTED_WRITES    (1),
		.SUPPORTS_NONPOSTED_WRITES (0),
		.REORDER                   (0)
	) i2cslave_to_avlmm_bridge_0_avalon_master_limiter (
		.clk                    (clk_50_clk_clk),                                                         //       clk.clk
		.reset                  (i2cslave_to_avlmm_bridge_0_reset_reset_bridge_in_reset_reset),           // clk_reset.reset
		.cmd_sink_ready         (router_src_ready),                                                       //  cmd_sink.ready
		.cmd_sink_valid         (router_src_valid),                                                       //          .valid
		.cmd_sink_data          (router_src_data),                                                        //          .data
		.cmd_sink_channel       (router_src_channel),                                                     //          .channel
		.cmd_sink_startofpacket (router_src_startofpacket),                                               //          .startofpacket
		.cmd_sink_endofpacket   (router_src_endofpacket),                                                 //          .endofpacket
		.cmd_src_ready          (i2cslave_to_avlmm_bridge_0_avalon_master_limiter_cmd_src_ready),         //   cmd_src.ready
		.cmd_src_data           (i2cslave_to_avlmm_bridge_0_avalon_master_limiter_cmd_src_data),          //          .data
		.cmd_src_channel        (i2cslave_to_avlmm_bridge_0_avalon_master_limiter_cmd_src_channel),       //          .channel
		.cmd_src_startofpacket  (i2cslave_to_avlmm_bridge_0_avalon_master_limiter_cmd_src_startofpacket), //          .startofpacket
		.cmd_src_endofpacket    (i2cslave_to_avlmm_bridge_0_avalon_master_limiter_cmd_src_endofpacket),   //          .endofpacket
		.rsp_sink_ready         (rsp_mux_src_ready),                                                      //  rsp_sink.ready
		.rsp_sink_valid         (rsp_mux_src_valid),                                                      //          .valid
		.rsp_sink_channel       (rsp_mux_src_channel),                                                    //          .channel
		.rsp_sink_data          (rsp_mux_src_data),                                                       //          .data
		.rsp_sink_startofpacket (rsp_mux_src_startofpacket),                                              //          .startofpacket
		.rsp_sink_endofpacket   (rsp_mux_src_endofpacket),                                                //          .endofpacket
		.rsp_src_ready          (i2cslave_to_avlmm_bridge_0_avalon_master_limiter_rsp_src_ready),         //   rsp_src.ready
		.rsp_src_valid          (i2cslave_to_avlmm_bridge_0_avalon_master_limiter_rsp_src_valid),         //          .valid
		.rsp_src_data           (i2cslave_to_avlmm_bridge_0_avalon_master_limiter_rsp_src_data),          //          .data
		.rsp_src_channel        (i2cslave_to_avlmm_bridge_0_avalon_master_limiter_rsp_src_channel),       //          .channel
		.rsp_src_startofpacket  (i2cslave_to_avlmm_bridge_0_avalon_master_limiter_rsp_src_startofpacket), //          .startofpacket
		.rsp_src_endofpacket    (i2cslave_to_avlmm_bridge_0_avalon_master_limiter_rsp_src_endofpacket),   //          .endofpacket
		.cmd_src_valid          (i2cslave_to_avlmm_bridge_0_avalon_master_limiter_cmd_valid_data)         // cmd_valid.data
	);

	Qsys_mm_interconnect_0_cmd_demux cmd_demux (
		.clk                (clk_50_clk_clk),                                                         //        clk.clk
		.reset              (i2cslave_to_avlmm_bridge_0_reset_reset_bridge_in_reset_reset),           //  clk_reset.reset
		.sink_ready         (i2cslave_to_avlmm_bridge_0_avalon_master_limiter_cmd_src_ready),         //       sink.ready
		.sink_channel       (i2cslave_to_avlmm_bridge_0_avalon_master_limiter_cmd_src_channel),       //           .channel
		.sink_data          (i2cslave_to_avlmm_bridge_0_avalon_master_limiter_cmd_src_data),          //           .data
		.sink_startofpacket (i2cslave_to_avlmm_bridge_0_avalon_master_limiter_cmd_src_startofpacket), //           .startofpacket
		.sink_endofpacket   (i2cslave_to_avlmm_bridge_0_avalon_master_limiter_cmd_src_endofpacket),   //           .endofpacket
		.sink_valid         (i2cslave_to_avlmm_bridge_0_avalon_master_limiter_cmd_valid_data),        // sink_valid.data
		.src0_ready         (cmd_demux_src0_ready),                                                   //       src0.ready
		.src0_valid         (cmd_demux_src0_valid),                                                   //           .valid
		.src0_data          (cmd_demux_src0_data),                                                    //           .data
		.src0_channel       (cmd_demux_src0_channel),                                                 //           .channel
		.src0_startofpacket (cmd_demux_src0_startofpacket),                                           //           .startofpacket
		.src0_endofpacket   (cmd_demux_src0_endofpacket),                                             //           .endofpacket
		.src1_ready         (cmd_demux_src1_ready),                                                   //       src1.ready
		.src1_valid         (cmd_demux_src1_valid),                                                   //           .valid
		.src1_data          (cmd_demux_src1_data),                                                    //           .data
		.src1_channel       (cmd_demux_src1_channel),                                                 //           .channel
		.src1_startofpacket (cmd_demux_src1_startofpacket),                                           //           .startofpacket
		.src1_endofpacket   (cmd_demux_src1_endofpacket)                                              //           .endofpacket
	);

	Qsys_mm_interconnect_0_cmd_mux cmd_mux (
		.clk                 (clk_50_clk_clk),                                               //       clk.clk
		.reset               (i2cslave_to_avlmm_bridge_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_src_ready),                                            //       src.ready
		.src_valid           (cmd_mux_src_valid),                                            //          .valid
		.src_data            (cmd_mux_src_data),                                             //          .data
		.src_channel         (cmd_mux_src_channel),                                          //          .channel
		.src_startofpacket   (cmd_mux_src_startofpacket),                                    //          .startofpacket
		.src_endofpacket     (cmd_mux_src_endofpacket),                                      //          .endofpacket
		.sink0_ready         (cmd_demux_src0_ready),                                         //     sink0.ready
		.sink0_valid         (cmd_demux_src0_valid),                                         //          .valid
		.sink0_channel       (cmd_demux_src0_channel),                                       //          .channel
		.sink0_data          (cmd_demux_src0_data),                                          //          .data
		.sink0_startofpacket (cmd_demux_src0_startofpacket),                                 //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src0_endofpacket)                                    //          .endofpacket
	);

	Qsys_mm_interconnect_0_cmd_mux cmd_mux_001 (
		.clk                 (clk_50_clk_clk),                              //       clk.clk
		.reset               (data_mem_reset2_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_001_src_ready),                       //       src.ready
		.src_valid           (cmd_mux_001_src_valid),                       //          .valid
		.src_data            (cmd_mux_001_src_data),                        //          .data
		.src_channel         (cmd_mux_001_src_channel),                     //          .channel
		.src_startofpacket   (cmd_mux_001_src_startofpacket),               //          .startofpacket
		.src_endofpacket     (cmd_mux_001_src_endofpacket),                 //          .endofpacket
		.sink0_ready         (cmd_demux_src1_ready),                        //     sink0.ready
		.sink0_valid         (cmd_demux_src1_valid),                        //          .valid
		.sink0_channel       (cmd_demux_src1_channel),                      //          .channel
		.sink0_data          (cmd_demux_src1_data),                         //          .data
		.sink0_startofpacket (cmd_demux_src1_startofpacket),                //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src1_endofpacket)                   //          .endofpacket
	);

	Qsys_mm_interconnect_0_rsp_demux rsp_demux (
		.clk                (clk_50_clk_clk),                                               //       clk.clk
		.reset              (i2cslave_to_avlmm_bridge_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_001_src_ready),                                         //      sink.ready
		.sink_channel       (router_001_src_channel),                                       //          .channel
		.sink_data          (router_001_src_data),                                          //          .data
		.sink_startofpacket (router_001_src_startofpacket),                                 //          .startofpacket
		.sink_endofpacket   (router_001_src_endofpacket),                                   //          .endofpacket
		.sink_valid         (router_001_src_valid),                                         //          .valid
		.src0_ready         (rsp_demux_src0_ready),                                         //      src0.ready
		.src0_valid         (rsp_demux_src0_valid),                                         //          .valid
		.src0_data          (rsp_demux_src0_data),                                          //          .data
		.src0_channel       (rsp_demux_src0_channel),                                       //          .channel
		.src0_startofpacket (rsp_demux_src0_startofpacket),                                 //          .startofpacket
		.src0_endofpacket   (rsp_demux_src0_endofpacket)                                    //          .endofpacket
	);

	Qsys_mm_interconnect_0_rsp_demux rsp_demux_001 (
		.clk                (clk_50_clk_clk),                              //       clk.clk
		.reset              (data_mem_reset2_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_002_src_ready),                        //      sink.ready
		.sink_channel       (router_002_src_channel),                      //          .channel
		.sink_data          (router_002_src_data),                         //          .data
		.sink_startofpacket (router_002_src_startofpacket),                //          .startofpacket
		.sink_endofpacket   (router_002_src_endofpacket),                  //          .endofpacket
		.sink_valid         (router_002_src_valid),                        //          .valid
		.src0_ready         (rsp_demux_001_src0_ready),                    //      src0.ready
		.src0_valid         (rsp_demux_001_src0_valid),                    //          .valid
		.src0_data          (rsp_demux_001_src0_data),                     //          .data
		.src0_channel       (rsp_demux_001_src0_channel),                  //          .channel
		.src0_startofpacket (rsp_demux_001_src0_startofpacket),            //          .startofpacket
		.src0_endofpacket   (rsp_demux_001_src0_endofpacket)               //          .endofpacket
	);

	Qsys_mm_interconnect_0_rsp_mux rsp_mux (
		.clk                 (clk_50_clk_clk),                                               //       clk.clk
		.reset               (i2cslave_to_avlmm_bridge_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (rsp_mux_src_ready),                                            //       src.ready
		.src_valid           (rsp_mux_src_valid),                                            //          .valid
		.src_data            (rsp_mux_src_data),                                             //          .data
		.src_channel         (rsp_mux_src_channel),                                          //          .channel
		.src_startofpacket   (rsp_mux_src_startofpacket),                                    //          .startofpacket
		.src_endofpacket     (rsp_mux_src_endofpacket),                                      //          .endofpacket
		.sink0_ready         (rsp_demux_src0_ready),                                         //     sink0.ready
		.sink0_valid         (rsp_demux_src0_valid),                                         //          .valid
		.sink0_channel       (rsp_demux_src0_channel),                                       //          .channel
		.sink0_data          (rsp_demux_src0_data),                                          //          .data
		.sink0_startofpacket (rsp_demux_src0_startofpacket),                                 //          .startofpacket
		.sink0_endofpacket   (rsp_demux_src0_endofpacket),                                   //          .endofpacket
		.sink1_ready         (rsp_demux_001_src0_ready),                                     //     sink1.ready
		.sink1_valid         (rsp_demux_001_src0_valid),                                     //          .valid
		.sink1_channel       (rsp_demux_001_src0_channel),                                   //          .channel
		.sink1_data          (rsp_demux_001_src0_data),                                      //          .data
		.sink1_startofpacket (rsp_demux_001_src0_startofpacket),                             //          .startofpacket
		.sink1_endofpacket   (rsp_demux_001_src0_endofpacket)                                //          .endofpacket
	);

	Qsys_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter (
		.in_clk_0_clk   (clk_50_clk_clk),                                               // in_clk_0.clk
		.in_rst_0_reset (i2cslave_to_avlmm_bridge_0_reset_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (led_s1_agent_rdata_fifo_src_data),                             //     in_0.data
		.in_0_valid     (led_s1_agent_rdata_fifo_src_valid),                            //         .valid
		.in_0_ready     (led_s1_agent_rdata_fifo_src_ready),                            //         .ready
		.out_0_data     (avalon_st_adapter_out_0_data),                                 //    out_0.data
		.out_0_valid    (avalon_st_adapter_out_0_valid),                                //         .valid
		.out_0_ready    (avalon_st_adapter_out_0_ready),                                //         .ready
		.out_0_error    (avalon_st_adapter_out_0_error)                                 //         .error
	);

	Qsys_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_001 (
		.in_clk_0_clk   (clk_50_clk_clk),                              // in_clk_0.clk
		.in_rst_0_reset (data_mem_reset2_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (data_mem_s2_agent_rdata_fifo_src_data),       //     in_0.data
		.in_0_valid     (data_mem_s2_agent_rdata_fifo_src_valid),      //         .valid
		.in_0_ready     (data_mem_s2_agent_rdata_fifo_src_ready),      //         .ready
		.out_0_data     (avalon_st_adapter_001_out_0_data),            //    out_0.data
		.out_0_valid    (avalon_st_adapter_001_out_0_valid),           //         .valid
		.out_0_ready    (avalon_st_adapter_001_out_0_ready),           //         .ready
		.out_0_error    (avalon_st_adapter_001_out_0_error)            //         .error
	);

endmodule
