// Copyright (C) 2016  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel MegaCore Function License Agreement, or other 
// applicable license agreement, including, without limitation, 
// that your use is for the sole purpose of programming logic 
// devices manufactured by Intel and sold by Intel or its 
// authorized distributors.  Please refer to the applicable 
// agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "06/14/2021 00:27:30"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          separableconvolution5x5_gaussian
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module separableconvolution5x5_gaussian_vlg_vec_tst();
// constants                                           
// general purpose registers
reg clk;
reg [7:0] i_pixel;
reg i_pixel_valid;
reg rst_n;
// wires                                               
wire [11:0] first_conv_check;
wire [7:0] o_pixel;
wire [11:0] pixel1_check;
wire [11:0] pixel2_check;
wire [11:0] pixel3_check;
wire [18:0] pixelCounter1;
wire pixelEnable_check;
wire [9:0] pixelRowCounter1;
wire [11:0] pixelStartUpCounter_check;
wire [11:0] second_conv_check;
wire [7:0] shift_out_check;
wire [7:0] tap0;
wire [7:0] tap1;
wire [7:0] tap2;
wire [7:0] tap3;

// assign statements (if any)                          
separableconvolution5x5_gaussian i1 (
// port map - connection between master ports and signals/registers   
	.clk(clk),
	.first_conv_check(first_conv_check),
	.i_pixel(i_pixel),
	.i_pixel_valid(i_pixel_valid),
	.o_pixel(o_pixel),
	.pixel1_check(pixel1_check),
	.pixel2_check(pixel2_check),
	.pixel3_check(pixel3_check),
	.pixelCounter1(pixelCounter1),
	.pixelEnable_check(pixelEnable_check),
	.pixelRowCounter1(pixelRowCounter1),
	.pixelStartUpCounter_check(pixelStartUpCounter_check),
	.rst_n(rst_n),
	.second_conv_check(second_conv_check),
	.shift_out_check(shift_out_check),
	.tap0(tap0),
	.tap1(tap1),
	.tap2(tap2),
	.tap3(tap3)
);
initial 
begin 
#1000000 $finish;
end 

// clk
initial
begin
	clk = 1'b1;
	# 10000;
	repeat(49)
	begin
		clk = 1'b0;
		clk = #10000 1'b1;
		# 10000;
	end
	clk = 1'b0;
end 

// i_pixel_valid
initial
begin
	i_pixel_valid = 1'b1;
end 

// rst_n
initial
begin
	rst_n = 1'b1;
end 
// i_pixel[ 7 ]
initial
begin
	i_pixel[7] = 1'b0;
end 
// i_pixel[ 6 ]
initial
begin
	i_pixel[6] = 1'b0;
end 
// i_pixel[ 5 ]
initial
begin
	i_pixel[5] = 1'b0;
	i_pixel[5] = #620000 1'b1;
end 
// i_pixel[ 4 ]
initial
begin
	i_pixel[4] = 1'b0;
	i_pixel[4] = #300000 1'b1;
	i_pixel[4] = #320000 1'b0;
	i_pixel[4] = #320000 1'b1;
end 
// i_pixel[ 3 ]
initial
begin
	i_pixel[3] = 1'b0;
	# 140000;
	repeat(2)
	begin
		i_pixel[3] = 1'b1;
		i_pixel[3] = #160000 1'b0;
		# 160000;
	end
	i_pixel[3] = 1'b1;
	i_pixel[3] = #160000 1'b0;
end 
// i_pixel[ 2 ]
initial
begin
	i_pixel[2] = 1'b0;
	# 60000;
	repeat(5)
	begin
		i_pixel[2] = 1'b1;
		i_pixel[2] = #80000 1'b0;
		# 80000;
	end
	i_pixel[2] = 1'b1;
	i_pixel[2] = #80000 1'b0;
end 
// i_pixel[ 1 ]
initial
begin
	i_pixel[1] = 1'b0;
	# 20000;
	repeat(12)
	begin
		i_pixel[1] = 1'b1;
		i_pixel[1] = #40000 1'b0;
		# 40000;
	end
	i_pixel[1] = 1'b1;
end 
// i_pixel[ 0 ]
always
begin
	i_pixel[0] = 1'b1;
	i_pixel[0] = #20000 1'b0;
	#20000;
end 
endmodule

