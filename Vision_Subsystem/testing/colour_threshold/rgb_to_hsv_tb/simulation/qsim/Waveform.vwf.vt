// Copyright (C) 2016  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel MegaCore Function License Agreement, or other 
// applicable license agreement, including, without limitation, 
// that your use is for the sole purpose of programming logic 
// devices manufactured by Intel and sold by Intel or its 
// authorized distributors.  Please refer to the applicable 
// agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "06/13/2021 22:08:47"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          rgb_to_hsv
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module rgb_to_hsv_vlg_vec_tst();
// constants                                           
// general purpose registers
reg clk;
reg [7:0] rgb_b;
reg [7:0] rgb_g;
reg [7:0] rgb_r;
reg rst_n;
reg valid_in;
// wires                                               
wire b_more_g_reg1_check;
wire [7:0] cdiff_reg1_check;
wire [7:0] cdiff_reg_check;
wire [8:0] division_check;
wire g_more_b_reg1_check;
wire [8:0] hsv_h;
wire [7:0] hsv_s;
wire [7:0] hsv_v;
wire [13:0] numer60_check;
wire [13:0] quotient_h_check;
wire [13:0] quotient_s_check;
wire r_more_b_reg1_check;
wire r_more_g_reg1_check;
wire valid_out;

// assign statements (if any)                          
rgb_to_hsv i1 (
// port map - connection between master ports and signals/registers   
	.b_more_g_reg1_check(b_more_g_reg1_check),
	.cdiff_reg1_check(cdiff_reg1_check),
	.cdiff_reg_check(cdiff_reg_check),
	.clk(clk),
	.division_check(division_check),
	.g_more_b_reg1_check(g_more_b_reg1_check),
	.hsv_h(hsv_h),
	.hsv_s(hsv_s),
	.hsv_v(hsv_v),
	.numer60_check(numer60_check),
	.quotient_h_check(quotient_h_check),
	.quotient_s_check(quotient_s_check),
	.r_more_b_reg1_check(r_more_b_reg1_check),
	.r_more_g_reg1_check(r_more_g_reg1_check),
	.rgb_b(rgb_b),
	.rgb_g(rgb_g),
	.rgb_r(rgb_r),
	.rst_n(rst_n),
	.valid_in(valid_in),
	.valid_out(valid_out)
);
initial 
begin 
#1000000 $finish;
end 

// clk
always
begin
	clk = 1'b0;
	clk = #10000 1'b1;
	#10000;
end 

// rst_n
initial
begin
	rst_n = 1'b1;
end 

// valid_in
initial
begin
	valid_in = 1'b1;
end 
// rgb_r[ 7 ]
initial
begin
	rgb_r[7] = 1'b0;
	rgb_r[7] = #30000 1'b1;
end 
// rgb_r[ 6 ]
initial
begin
	rgb_r[6] = 1'b1;
end 
// rgb_r[ 5 ]
initial
begin
	rgb_r[5] = 1'b0;
	rgb_r[5] = #30000 1'b1;
	rgb_r[5] = #20000 1'b0;
	rgb_r[5] = #20000 1'b1;
end 
// rgb_r[ 4 ]
initial
begin
	rgb_r[4] = 1'b0;
	rgb_r[4] = #30000 1'b1;
	rgb_r[4] = #20000 1'b0;
	rgb_r[4] = #20000 1'b1;
end 
// rgb_r[ 3 ]
initial
begin
	rgb_r[3] = 1'b1;
end 
// rgb_r[ 2 ]
initial
begin
	rgb_r[2] = 1'b1;
	rgb_r[2] = #30000 1'b0;
end 
// rgb_r[ 1 ]
initial
begin
	rgb_r[1] = 1'b1;
	rgb_r[1] = #50000 1'b0;
	rgb_r[1] = #20000 1'b1;
end 
// rgb_r[ 0 ]
initial
begin
	rgb_r[0] = 1'b0;
	rgb_r[0] = #30000 1'b1;
	rgb_r[0] = #20000 1'b0;
	rgb_r[0] = #20000 1'b1;
end 
// rgb_g[ 7 ]
initial
begin
	rgb_g[7] = 1'b0;
	rgb_g[7] = #30000 1'b1;
end 
// rgb_g[ 6 ]
initial
begin
	rgb_g[6] = 1'b1;
	rgb_g[6] = #30000 1'b0;
	rgb_g[6] = #20000 1'b1;
	rgb_g[6] = #20000 1'b0;
end 
// rgb_g[ 5 ]
initial
begin
	rgb_g[5] = 1'b0;
end 
// rgb_g[ 4 ]
initial
begin
	rgb_g[4] = 1'b1;
	rgb_g[4] = #50000 1'b0;
	rgb_g[4] = #20000 1'b1;
end 
// rgb_g[ 3 ]
initial
begin
	rgb_g[3] = 1'b0;
	rgb_g[3] = #30000 1'b1;
end 
// rgb_g[ 2 ]
initial
begin
	rgb_g[2] = 1'b1;
	rgb_g[2] = #30000 1'b0;
end 
// rgb_g[ 1 ]
initial
begin
	rgb_g[1] = 1'b0;
end 
// rgb_g[ 0 ]
initial
begin
	rgb_g[0] = 1'b1;
	rgb_g[0] = #30000 1'b0;
end 
// rgb_b[ 7 ]
initial
begin
	rgb_b[7] = 1'b1;
	rgb_b[7] = #30000 1'b0;
	rgb_b[7] = #20000 1'b1;
	rgb_b[7] = #20000 1'b0;
end 
// rgb_b[ 6 ]
initial
begin
	rgb_b[6] = 1'b1;
	rgb_b[6] = #30000 1'b0;
	rgb_b[6] = #20000 1'b1;
	rgb_b[6] = #20000 1'b0;
end 
// rgb_b[ 5 ]
initial
begin
	rgb_b[5] = 1'b1;
	rgb_b[5] = #50000 1'b0;
	rgb_b[5] = #20000 1'b1;
end 
// rgb_b[ 4 ]
initial
begin
	rgb_b[4] = 1'b1;
	rgb_b[4] = #50000 1'b0;
	rgb_b[4] = #20000 1'b1;
end 
// rgb_b[ 3 ]
initial
begin
	rgb_b[3] = 1'b1;
	rgb_b[3] = #30000 1'b0;
	rgb_b[3] = #20000 1'b1;
	rgb_b[3] = #20000 1'b0;
end 
// rgb_b[ 2 ]
initial
begin
	rgb_b[2] = 1'b1;
	rgb_b[2] = #30000 1'b0;
end 
// rgb_b[ 1 ]
initial
begin
	rgb_b[1] = 1'b1;
	rgb_b[1] = #50000 1'b0;
	rgb_b[1] = #20000 1'b1;
end 
// rgb_b[ 0 ]
initial
begin
	rgb_b[0] = 1'b1;
	rgb_b[0] = #30000 1'b0;
end 
endmodule

